{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/home/malmi/bank/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _toConsumableArray = require(\"/home/malmi/bank/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar isFullwidthCodePoint = require('is-fullwidth-code-point');\n\nvar astralRegex = require('astral-regex');\n\nvar ansiStyles = require('ansi-styles');\n\nvar ESCAPES = [\"\\x1B\", \"\\x9B\"];\nvar END_CODE = 39;\n\nvar wrapAnsi = function wrapAnsi(code) {\n  return \"\".concat(ESCAPES[0], \"[\").concat(code, \"m\");\n};\n\nmodule.exports = function (str, begin, end) {\n  var arr = _toConsumableArray(str.normalize());\n\n  end = typeof end === 'number' ? end : arr.length;\n  var insideEscape = false;\n  var escapeCode = null;\n  var visible = 0;\n  var output = '';\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = arr.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _step$value = _slicedToArray(_step.value, 2),\n          i = _step$value[0],\n          x = _step$value[1];\n\n      var leftEscape = false;\n\n      if (ESCAPES.includes(x)) {\n        insideEscape = true;\n        var code = /\\d[^m]*/.exec(str.slice(i, i + 18));\n        escapeCode = code === END_CODE ? null : code;\n      } else if (insideEscape && x === 'm') {\n        insideEscape = false;\n        leftEscape = true;\n      }\n\n      if (!insideEscape && !leftEscape) {\n        ++visible;\n      }\n\n      if (!astralRegex({\n        exact: true\n      }).test(x) && isFullwidthCodePoint(x.codePointAt())) {\n        ++visible;\n      }\n\n      if (visible > begin && visible <= end) {\n        output += x;\n      } else if (visible === begin && !insideEscape && escapeCode !== null && escapeCode !== END_CODE) {\n        output += wrapAnsi(escapeCode);\n      } else if (visible >= end) {\n        if (escapeCode !== null) {\n          output += wrapAnsi(ansiStyles.codes.get(parseInt(escapeCode, 10)) || END_CODE);\n        }\n\n        break;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return output;\n};","map":null,"metadata":{},"sourceType":"script"}